{"ast":null,"code":"import*as actionTypes from'./constants';import{getNewAlbums}from'@/services/recommend';import{getTopBanners,getHotRecommends,getTopList}from'@/services/recommend';var changeTopBannerAction=function changeTopBannerAction(res){return{type:actionTypes.CHANGE_TOP_BANNERS,topBanners:res.banners};};var changeHotRecommendAction=function changeHotRecommendAction(res){return{type:actionTypes.CHANGE_HOT_RECOMMEND,hotRecommends:res.result};};var changeNewAlbumAction=function changeNewAlbumAction(res){return{type:actionTypes.CHANGE_NEW_ALBUM,newAlbums:res.albums};};var changeUpRankingAction=function changeUpRankingAction(res){return{type:actionTypes.CHANGE_UP_RANKING,upRanking:res.playlist};};var changeNewRankingAction=function changeNewRankingAction(res){return{type:actionTypes.CHANGE_NEW_RANKING,newRanking:res.playlist};};var changeOriginRankingAction=function changeOriginRankingAction(res){return{type:actionTypes.CHANGE_ORIGIN_RANKING,originRanking:res.playlist};};export var getTopBannerAction=function getTopBannerAction(){return function(dispatch){getTopBanners().then(function(res){dispatch(changeTopBannerAction(res));});};};export var getHotRecommendAction=function getHotRecommendAction(limit){return function(dispatch){getHotRecommends(limit).then(function(res){dispatch(changeHotRecommendAction(res));});};};export var getNewAlbumAction=function getNewAlbumAction(limit){return function(dispatch){getNewAlbums(limit).then(function(res){// const albums = res.albums;\ndispatch(changeNewAlbumAction(res));});};};export var getTopListAction=function getTopListAction(idx){return function(dispatch){getTopList(idx).then(function(res){switch(idx){case 0:dispatch(changeUpRankingAction(res));break;case 2:dispatch(changeNewRankingAction(res));break;case 3:dispatch(changeOriginRankingAction(res));break;default:}});};};","map":{"version":3,"sources":["C:/Users/冷鸟一米五/Desktop/my-learn/React学习/课堂/code/hy-music-web-music/src/pages/discover/c-pages/recommend/store/actionCreators.js"],"names":["actionTypes","getNewAlbums","getTopBanners","getHotRecommends","getTopList","changeTopBannerAction","res","type","CHANGE_TOP_BANNERS","topBanners","banners","changeHotRecommendAction","CHANGE_HOT_RECOMMEND","hotRecommends","result","changeNewAlbumAction","CHANGE_NEW_ALBUM","newAlbums","albums","changeUpRankingAction","CHANGE_UP_RANKING","upRanking","playlist","changeNewRankingAction","CHANGE_NEW_RANKING","newRanking","changeOriginRankingAction","CHANGE_ORIGIN_RANKING","originRanking","getTopBannerAction","dispatch","then","getHotRecommendAction","limit","getNewAlbumAction","getTopListAction","idx"],"mappings":"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","sourcesContent":["import * as actionTypes from './constants';\n\nimport { getNewAlbums } from '@/services/recommend';\n\nimport { \n  getTopBanners,\n  getHotRecommends,\n  getTopList\n} from '@/services/recommend';\n\nconst changeTopBannerAction = (res) => ({\n  type: actionTypes.CHANGE_TOP_BANNERS,\n  topBanners: res.banners\n});\n\nconst changeHotRecommendAction = (res) => ({\n  type: actionTypes.CHANGE_HOT_RECOMMEND,\n  hotRecommends: res.result\n})\n\nconst changeNewAlbumAction = (res) => ({\n  type: actionTypes.CHANGE_NEW_ALBUM,\n  newAlbums: res.albums\n})\n\nconst changeUpRankingAction = (res) => ({\n  type: actionTypes.CHANGE_UP_RANKING,\n  upRanking: res.playlist\n})\n\nconst changeNewRankingAction = (res) => ({\n  type: actionTypes.CHANGE_NEW_RANKING,\n  newRanking: res.playlist\n})\n\nconst changeOriginRankingAction = (res) => ({\n  type: actionTypes.CHANGE_ORIGIN_RANKING,\n  originRanking: res.playlist\n})\n\nexport const getTopBannerAction = () => {\n  return dispatch => {\n    getTopBanners().then(res => {\n      dispatch(changeTopBannerAction(res));\n    })\n  }\n};\n\nexport const getHotRecommendAction = (limit) => {\n  return dispatch => {\n    getHotRecommends(limit).then(res => {\n      dispatch(changeHotRecommendAction(res));\n    })\n  }\n}\n\nexport const getNewAlbumAction = (limit) => {\n  return dispatch => {\n    getNewAlbums(limit).then(res => {\n      // const albums = res.albums;\n      dispatch(changeNewAlbumAction(res));\n    })\n  }\n}\n\nexport const getTopListAction = (idx) => {\n  return dispatch => {\n    getTopList(idx).then(res => {\n      switch (idx) {\n        case 0:\n          dispatch(changeUpRankingAction(res));\n          break;\n        case 2:\n          dispatch(changeNewRankingAction(res));\n          break;\n        case 3:\n          dispatch(changeOriginRankingAction(res));\n          break;\n        default:\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}