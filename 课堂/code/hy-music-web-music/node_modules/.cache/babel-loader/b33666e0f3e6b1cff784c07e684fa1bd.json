{"ast":null,"code":"import { getSongDetail, getLyric } from '@/services/player';\nimport { getRandomNumber } from '@/utils/math-utils';\nimport { parseLyric } from '@/utils/parse-lyric';\nimport * as actionTypes from './constants';\n\nconst changeCurrentSongAction = currentSong => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong\n});\n\nconst changePlayListAction = playList => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList\n});\n\nconst changeCurrentSongIndexAction = index => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n});\n\nconst changLyricListAction = lyricList => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList\n}); // 对外暴露的action\n\n\nexport const changeSequenceAction = sequence => ({\n  type: actionTypes.CHANGE_SEQUENCE,\n  sequence\n});\nexport const changeCurrentLyricIndexAction = index => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  index\n});\nexport const changeCurrentIndexAndSongAction = tag => {\n  return (dispatch, getState) => {\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n\n    switch (sequence) {\n      case 1:\n        // 随机播放\n        let randomIndex = getRandomNumber(playList.length);\n\n        while (randomIndex === currentSongIndex) {\n          randomIndex = getRandomNumber(playList.length);\n        }\n\n        currentSongIndex = randomIndex;\n        break;\n\n      default:\n        // 顺序播放\n        currentSongIndex += tag;\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n    }\n\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongAction(currentSong));\n    dispatch(changeCurrentSongIndexAction(currentSongIndex)); // 请求歌词\n\n    dispatch(getLyricAction(currentSong.id));\n  };\n};\nexport const getSongDetailAction = ids => {\n  return (dispatch, getState) => {\n    // 1.根据id查找playList中是否已经有了该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex(song => song.id === ids); // 2.判断是否找到歌曲\n\n    let song = null;\n\n    if (songIndex !== -1) {\n      // 查找歌曲\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      song = playList[songIndex];\n      dispatch(changeCurrentSongAction(song));\n      dispatch(getLyricAction(song.id));\n    } else {\n      // 没有找到歌曲\n      // 请求歌曲数据\n      getSongDetail(ids).then(res => {\n        song = res.songs && res.songs[0];\n        if (!song) return; // 1.将最新请求到的歌曲添加到播放列表中\n\n        const newPlayList = [...playList];\n        newPlayList.push(song); // 2.更新redux中的值\n\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song)); // 3.请求歌词\n\n        dispatch(getLyricAction(song.id));\n      });\n    }\n  };\n};\nexport const getLyricAction = id => {\n  return dispatch => {\n    getLyric(id).then(res => {\n      const lyric = res.lrc.lyric;\n      const lyricList = parseLyric(lyric);\n      dispatch(changLyricListAction(lyricList));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/冷鸟一米五/Desktop/my-learn/React学习/课堂/code/hy-music-web-music/src/pages/player/store/actionCreators.js"],"names":["getSongDetail","getLyric","getRandomNumber","parseLyric","actionTypes","changeCurrentSongAction","currentSong","type","CHANGE_CURRENT_SONG","changePlayListAction","playList","CHANGE_PLAY_LIST","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","changLyricListAction","lyricList","CHANGE_LYRIC_LIST","changeSequenceAction","sequence","CHANGE_SEQUENCE","changeCurrentLyricIndexAction","CHANGE_CURRENT_LYRIC_INDEX","changeCurrentIndexAndSongAction","tag","dispatch","getState","getIn","currentSongIndex","randomIndex","length","getLyricAction","id","getSongDetailAction","ids","songIndex","findIndex","song","then","res","songs","newPlayList","push","lyric","lrc"],"mappings":"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","sourcesContent":["import { getSongDetail, getLyric } from '@/services/player';\nimport { getRandomNumber } from '@/utils/math-utils';\nimport { parseLyric } from '@/utils/parse-lyric';\n\nimport * as actionTypes from './constants';\n\nconst changeCurrentSongAction = (currentSong) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong\n});\n\nconst changePlayListAction = (playList) => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList\n});\n\nconst changeCurrentSongIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n});\n\nconst changLyricListAction = (lyricList) => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList\n})\n\n\n// 对外暴露的action\nexport const changeSequenceAction = (sequence) => ({\n  type: actionTypes.CHANGE_SEQUENCE,\n  sequence\n});\n\nexport const changeCurrentLyricIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  index\n})\n\nexport const changeCurrentIndexAndSongAction = (tag) => {\n  return (dispatch, getState) => {\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n\n    switch (sequence) {\n      case 1: // 随机播放\n        let randomIndex = getRandomNumber(playList.length);\n        while (randomIndex === currentSongIndex) {\n          randomIndex = getRandomNumber(playList.length);\n        }\n        currentSongIndex = randomIndex;\n        break;\n      default: // 顺序播放\n        currentSongIndex += tag;\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n    }\n\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongAction(currentSong));\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\n\n    // 请求歌词\n    dispatch(getLyricAction(currentSong.id));\n  }\n}\n\nexport const getSongDetailAction = (ids) => {\n  return (dispatch, getState) => {\n    // 1.根据id查找playList中是否已经有了该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex(song => song.id === ids);\n\n    // 2.判断是否找到歌曲\n    let song = null;\n    if (songIndex !== -1) { // 查找歌曲\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      song = playList[songIndex];\n      dispatch(changeCurrentSongAction(song));\n      dispatch(getLyricAction(song.id));\n    } else { // 没有找到歌曲\n      // 请求歌曲数据\n      getSongDetail(ids).then(res => {\n        song = res.songs && res.songs[0];\n        if (!song) return;\n\n        // 1.将最新请求到的歌曲添加到播放列表中\n        const newPlayList = [...playList];\n        newPlayList.push(song);\n\n        // 2.更新redux中的值\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song));\n\n        // 3.请求歌词\n        dispatch(getLyricAction(song.id));\n      })\n    }\n  }\n}\n\nexport const getLyricAction = (id) => {\n  return dispatch => {\n    getLyric(id).then(res => {\n      const lyric = res.lrc.lyric;\n      const lyricList = parseLyric(lyric);\n      dispatch(changLyricListAction(lyricList));\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}