{"ast":null,"code":"import axios from'axios';import{BASE_URL,TIMEOUT}from\"./config\";var instance=axios.create({baseURL:BASE_URL,timeout:TIMEOUT});instance.interceptors.request.use(function(config){// 1.发送网络请求时, 在界面的中间位置显示Loading的组件\n// 2.某一些请求要求用户必须携带token, 如果没有携带, 那么直接跳转到登录页面\n// 3.params/data序列化的操作\nreturn config;},function(err){});instance.interceptors.response.use(function(res){return res.data;},function(err){if(err&&err.response){switch(err.response.status){case 400:console.log(\"请求错误\");break;case 401:console.log(\"未授权访问\");break;default:console.log(\"其他错误信息\");}}return err;});export default instance;","map":{"version":3,"sources":["C:/Users/冷鸟一米五/Desktop/my-learn/React学习/课堂/code/hy-music-web-music/src/services/request.js"],"names":["axios","BASE_URL","TIMEOUT","instance","create","baseURL","timeout","interceptors","request","use","config","err","response","res","data","status","console","log"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,QAAT,CAAmBC,OAAnB,KAAkC,UAAlC,CAEA,GAAMC,CAAAA,QAAQ,CAAGH,KAAK,CAACI,MAAN,CAAa,CAC5BC,OAAO,CAAEJ,QADmB,CAE5BK,OAAO,CAAEJ,OAFmB,CAAb,CAAjB,CAKAC,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,SAAAC,MAAM,CAAI,CAC1C;AAEA;AAEA;AAEA,MAAOA,CAAAA,MAAP,CACD,CARD,CAQG,SAAAC,GAAG,CAAI,CAET,CAVD,EAYAR,QAAQ,CAACI,YAAT,CAAsBK,QAAtB,CAA+BH,GAA/B,CAAmC,SAAAI,GAAG,CAAI,CACxC,MAAOA,CAAAA,GAAG,CAACC,IAAX,CACD,CAFD,CAEG,SAAAH,GAAG,CAAI,CACR,GAAIA,GAAG,EAAIA,GAAG,CAACC,QAAf,CAAyB,CACvB,OAAQD,GAAG,CAACC,QAAJ,CAAaG,MAArB,EACE,IAAK,IAAL,CACEC,OAAO,CAACC,GAAR,CAAY,MAAZ,EACA,MACF,IAAK,IAAL,CACED,OAAO,CAACC,GAAR,CAAY,OAAZ,EACA,MACF,QACED,OAAO,CAACC,GAAR,CAAY,QAAZ,EARJ,CAUD,CACD,MAAON,CAAAA,GAAP,CACD,CAhBD,EAkBA,cAAeR,CAAAA,QAAf","sourcesContent":["import axios from 'axios';\n\nimport { BASE_URL, TIMEOUT } from \"./config\";\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  timeout: TIMEOUT\n});\n\ninstance.interceptors.request.use(config => {\n  // 1.发送网络请求时, 在界面的中间位置显示Loading的组件\n\n  // 2.某一些请求要求用户必须携带token, 如果没有携带, 那么直接跳转到登录页面\n\n  // 3.params/data序列化的操作\n\n  return config;\n}, err => {\n\n});\n\ninstance.interceptors.response.use(res => {\n  return res.data;\n}, err => {\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        console.log(\"请求错误\");\n        break;\n      case 401:\n        console.log(\"未授权访问\");\n        break;\n      default:\n        console.log(\"其他错误信息\");\n    }\n  }\n  return err;\n});\n\nexport default instance;\n\n"]},"metadata":{},"sourceType":"module"}