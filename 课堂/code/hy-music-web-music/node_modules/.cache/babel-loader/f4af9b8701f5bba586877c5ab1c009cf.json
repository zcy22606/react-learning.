{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u51B7\\u9E1F\\u4E00\\u7C73\\u4E94\\\\Desktop\\\\my-learn\\\\React\\u5B66\\u4E60\\\\\\u8BFE\\u5802\\\\code\\\\hy-music-web-music\\\\src\\\\pages\\\\player\\\\app-player-bar\\\\index.js\";\nimport React, { memo, useState, useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { getSizeImage, formatDate, getPlaySong } from '@/utils/format-utils';\nimport { getSongDetailAction, changeSequenceAction, changeCurrentIndexAndSongAction, changeCurrentLyricIndexAction } from '../store/actionCreators';\nimport { message } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { Slider } from 'antd';\nimport { PlaybarWrapper, Control, PlayInfo, Operator } from './style';\nexport default memo(function HYAppPlayerBar() {\n  // props and state\n  const [currentTime, setCurrentTime] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isChanging, setIsChanging] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false); // redux hook\n\n  const {\n    currentSong,\n    sequence,\n    lyricList,\n    currentLyricIndex\n  } = useSelector(state => ({\n    currentSong: state.getIn([\"player\", \"currentSong\"]),\n    sequence: state.getIn([\"player\", \"sequence\"]),\n    lyricList: state.getIn([\"player\", \"lyricList\"]),\n    currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"])\n  }), shallowEqual);\n  const dispatch = useDispatch(); // other hooks\n\n  const audioRef = useRef();\n  useEffect(() => {\n    dispatch(getSongDetailAction(167876));\n  }, [dispatch]);\n  useEffect(() => {\n    audioRef.current.src = getPlaySong(currentSong.id);\n    audioRef.current.play().then(res => {\n      setIsPlaying(true);\n    }).catch(err => {\n      setIsPlaying(false);\n    });\n  }, [currentSong]); // other handle\n\n  const picUrl = currentSong.al && currentSong.al.picUrl || \"\";\n  const singerName = currentSong.ar && currentSong.ar[0].name || \"未知歌手\";\n  const duration = currentSong.dt || 0;\n  const showDuration = formatDate(duration, \"mm:ss\");\n  const showCurrentTime = formatDate(currentTime, \"mm:ss\"); // handle function\n\n  const playMusic = useCallback(() => {\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\n    setIsPlaying(!isPlaying);\n  }, [isPlaying]);\n\n  const timeUpdate = e => {\n    const currentTime = e.target.currentTime;\n\n    if (!isChanging) {\n      setCurrentTime(currentTime * 1000);\n      setProgress(currentTime * 1000 / duration * 100);\n    } // 获取当前的歌词\n\n\n    let i = 0;\n\n    for (; i < lyricList.length; i++) {\n      let lyricItem = lyricList[i];\n\n      if (currentTime * 1000 < lyricItem.time) {\n        break;\n      }\n    }\n\n    if (currentLyricIndex !== i - 1) {\n      dispatch(changeCurrentLyricIndexAction(i - 1));\n      const content = lyricList[i - 1] && lyricList[i - 1].content;\n      message.open({\n        key: \"lyric\",\n        content: content,\n        duration: 0,\n        className: \"lyric-class\"\n      });\n    }\n  };\n\n  const changeSequence = () => {\n    let currentSequence = sequence + 1;\n\n    if (currentSequence > 2) {\n      currentSequence = 0;\n    }\n\n    dispatch(changeSequenceAction(currentSequence));\n  };\n\n  const changeMusic = tag => {\n    dispatch(changeCurrentIndexAndSongAction(tag));\n  };\n\n  const handleMusicEnded = () => {\n    if (sequence === 2) {\n      // 单曲循环\n      audioRef.current.currentTime = 0;\n      audioRef.current.play();\n    } else {\n      dispatch(changeCurrentIndexAndSongAction(1));\n    }\n  };\n\n  const sliderChange = useCallback(value => {\n    setIsChanging(true);\n    const currentTime = value / 100 * duration;\n    setCurrentTime(currentTime);\n    setProgress(value);\n  }, [duration]);\n  const sliderAfterChange = useCallback(value => {\n    const currentTime = value / 100 * duration / 1000;\n    audioRef.current.currentTime = currentTime;\n    setCurrentTime(currentTime * 1000);\n    setIsChanging(false);\n\n    if (!isPlaying) {\n      playMusic();\n    }\n  }, [duration, isPlaying, playMusic]);\n  return /*#__PURE__*/React.createElement(PlaybarWrapper, {\n    className: \"sprite_player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content wrap-v2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Control, {\n    isPlaying: isPlaying,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player prev\",\n    onClick: e => changeMusic(-1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player play\",\n    onClick: e => playMusic(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player next\",\n    onClick: e => changeMusic(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(PlayInfo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    to: \"/discover/player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: getSizeImage(picUrl, 35),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"song\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"song-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, currentSong.name), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#/\",\n    className: \"singer-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, singerName)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    defaultValue: 30,\n    value: progress,\n    onChange: sliderChange,\n    onAfterChange: sliderAfterChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"now-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, showCurrentTime), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"divider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, \"/\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"duration\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, showDuration))))), /*#__PURE__*/React.createElement(Operator, {\n    sequence: sequence,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player btn favor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player btn share\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right sprite_player\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player btn volume\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player btn loop\",\n    onClick: e => changeSequence(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"sprite_player btn playlist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"audio\", {\n    ref: audioRef,\n    onTimeUpdate: e => timeUpdate(e),\n    onEnded: e => handleMusicEnded(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/冷鸟一米五/Desktop/my-learn/React学习/课堂/code/hy-music-web-music/src/pages/player/app-player-bar/index.js"],"names":["React","memo","useState","useEffect","useRef","useCallback","useDispatch","useSelector","shallowEqual","getSizeImage","formatDate","getPlaySong","getSongDetailAction","changeSequenceAction","changeCurrentIndexAndSongAction","changeCurrentLyricIndexAction","message","NavLink","Slider","PlaybarWrapper","Control","PlayInfo","Operator","HYAppPlayerBar","currentTime","setCurrentTime","progress","setProgress","isChanging","setIsChanging","isPlaying","setIsPlaying","currentSong","sequence","lyricList","currentLyricIndex","state","getIn","dispatch","audioRef","current","src","id","play","then","res","catch","err","picUrl","al","singerName","ar","name","duration","dt","showDuration","showCurrentTime","playMusic","pause","timeUpdate","e","target","i","length","lyricItem","time","content","open","key","className","changeSequence","currentSequence","changeMusic","tag","handleMusicEnded","sliderChange","value","sliderAfterChange"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,SAAhC,EAA2CC,MAA3C,EAAmDC,WAAnD,QAAsE,OAAtE;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,QAAuD,aAAvD;AAEA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,WAAnC,QAAsD,sBAAtD;AACA,SACEC,mBADF,EAEEC,oBAFF,EAGEC,+BAHF,EAIEC,6BAJF,QAKO,yBALP;AAOA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SACEC,cADF,EAEEC,OAFF,EAGEC,QAHF,EAIEC,QAJF,QAKO,SALP;AAOA,eAAerB,IAAI,CAAC,SAASsB,cAAT,GAA0B;AAC5C;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACwB,QAAD,EAAWC,WAAX,IAA0BzB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAAC0B,UAAD,EAAaC,aAAb,IAA8B3B,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAAC,KAAD,CAA1C,CAL4C,CAO5C;;AACA,QAAM;AACJ8B,IAAAA,WADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA;AAJI,MAKF5B,WAAW,CAAC6B,KAAK,KAAK;AACxBJ,IAAAA,WAAW,EAAEI,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,aAAX,CAAZ,CADW;AAExBJ,IAAAA,QAAQ,EAAEG,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,UAAX,CAAZ,CAFc;AAGxBH,IAAAA,SAAS,EAAEE,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,WAAX,CAAZ,CAHa;AAIxBF,IAAAA,iBAAiB,EAAEC,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,mBAAX,CAAZ;AAJK,GAAL,CAAN,EAKX7B,YALW,CALf;AAWA,QAAM8B,QAAQ,GAAGhC,WAAW,EAA5B,CAnB4C,CAqB5C;;AACA,QAAMiC,QAAQ,GAAGnC,MAAM,EAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdmC,IAAAA,QAAQ,CAAC1B,mBAAmB,CAAC,MAAD,CAApB,CAAR;AACD,GAFQ,EAEN,CAAC0B,QAAD,CAFM,CAAT;AAIAnC,EAAAA,SAAS,CAAC,MAAO;AACfoC,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,GAAjB,GAAuB9B,WAAW,CAACqB,WAAW,CAACU,EAAb,CAAlC;AACAH,IAAAA,QAAQ,CAACC,OAAT,CAAiBG,IAAjB,GAAwBC,IAAxB,CAA6BC,GAAG,IAAI;AAClCd,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFD,EAEGe,KAFH,CAESC,GAAG,IAAI;AACdhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJD;AAKD,GAPQ,EAON,CAACC,WAAD,CAPM,CAAT,CA3B4C,CAoC5C;;AACA,QAAMgB,MAAM,GAAIhB,WAAW,CAACiB,EAAZ,IAAkBjB,WAAW,CAACiB,EAAZ,CAAeD,MAAlC,IAA6C,EAA5D;AACA,QAAME,UAAU,GAAIlB,WAAW,CAACmB,EAAZ,IAAkBnB,WAAW,CAACmB,EAAZ,CAAe,CAAf,EAAkBC,IAArC,IAA8C,MAAjE;AACA,QAAMC,QAAQ,GAAGrB,WAAW,CAACsB,EAAZ,IAAkB,CAAnC;AACA,QAAMC,YAAY,GAAG7C,UAAU,CAAC2C,QAAD,EAAW,OAAX,CAA/B;AACA,QAAMG,eAAe,GAAG9C,UAAU,CAACc,WAAD,EAAc,OAAd,CAAlC,CAzC4C,CA2C5C;;AACA,QAAMiC,SAAS,GAAGpD,WAAW,CAAC,MAAM;AAClCyB,IAAAA,SAAS,GAAGS,QAAQ,CAACC,OAAT,CAAiBkB,KAAjB,EAAH,GAA6BnB,QAAQ,CAACC,OAAT,CAAiBG,IAAjB,EAAtC;AACAZ,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAH4B,EAG1B,CAACA,SAAD,CAH0B,CAA7B;;AAKA,QAAM6B,UAAU,GAAIC,CAAD,IAAO;AACxB,UAAMpC,WAAW,GAAGoC,CAAC,CAACC,MAAF,CAASrC,WAA7B;;AACA,QAAI,CAACI,UAAL,EAAiB;AACfH,MAAAA,cAAc,CAACD,WAAW,GAAG,IAAf,CAAd;AACAG,MAAAA,WAAW,CAACH,WAAW,GAAG,IAAd,GAAqB6B,QAArB,GAAgC,GAAjC,CAAX;AACD,KALuB,CAOxB;;;AACA,QAAIS,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG5B,SAAS,CAAC6B,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAChC,UAAIE,SAAS,GAAG9B,SAAS,CAAC4B,CAAD,CAAzB;;AACA,UAAItC,WAAW,GAAG,IAAd,GAAqBwC,SAAS,CAACC,IAAnC,EAAyC;AACvC;AACD;AACF;;AAED,QAAI9B,iBAAiB,KAAK2B,CAAC,GAAG,CAA9B,EAAiC;AAC/BxB,MAAAA,QAAQ,CAACvB,6BAA6B,CAAC+C,CAAC,GAAG,CAAL,CAA9B,CAAR;AACA,YAAMI,OAAO,GAAGhC,SAAS,CAAC4B,CAAC,GAAG,CAAL,CAAT,IAAoB5B,SAAS,CAAC4B,CAAC,GAAG,CAAL,CAAT,CAAiBI,OAArD;AACAlD,MAAAA,OAAO,CAACmD,IAAR,CAAa;AACXC,QAAAA,GAAG,EAAE,OADM;AAEXF,QAAAA,OAAO,EAAEA,OAFE;AAGXb,QAAAA,QAAQ,EAAE,CAHC;AAIXgB,QAAAA,SAAS,EAAE;AAJA,OAAb;AAMD;AACF,GA1BD;;AA4BA,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAIC,eAAe,GAAGtC,QAAQ,GAAG,CAAjC;;AACA,QAAIsC,eAAe,GAAG,CAAtB,EAAyB;AACvBA,MAAAA,eAAe,GAAG,CAAlB;AACD;;AACDjC,IAAAA,QAAQ,CAACzB,oBAAoB,CAAC0D,eAAD,CAArB,CAAR;AACD,GAND;;AAQA,QAAMC,WAAW,GAAIC,GAAD,IAAS;AAC3BnC,IAAAA,QAAQ,CAACxB,+BAA+B,CAAC2D,GAAD,CAAhC,CAAR;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIzC,QAAQ,KAAK,CAAjB,EAAoB;AAAE;AACpBM,MAAAA,QAAQ,CAACC,OAAT,CAAiBhB,WAAjB,GAA+B,CAA/B;AACAe,MAAAA,QAAQ,CAACC,OAAT,CAAiBG,IAAjB;AACD,KAHD,MAGO;AACLL,MAAAA,QAAQ,CAACxB,+BAA+B,CAAC,CAAD,CAAhC,CAAR;AACD;AACF,GAPD;;AASA,QAAM6D,YAAY,GAAGtE,WAAW,CAAEuE,KAAD,IAAW;AAC1C/C,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,UAAML,WAAW,GAAGoD,KAAK,GAAG,GAAR,GAAcvB,QAAlC;AACA5B,IAAAA,cAAc,CAACD,WAAD,CAAd;AACAG,IAAAA,WAAW,CAACiD,KAAD,CAAX;AACD,GAL+B,EAK7B,CAACvB,QAAD,CAL6B,CAAhC;AAOA,QAAMwB,iBAAiB,GAAGxE,WAAW,CAAEuE,KAAD,IAAW;AAC/C,UAAMpD,WAAW,GAAGoD,KAAK,GAAG,GAAR,GAAcvB,QAAd,GAAyB,IAA7C;AACAd,IAAAA,QAAQ,CAACC,OAAT,CAAiBhB,WAAjB,GAA+BA,WAA/B;AACAC,IAAAA,cAAc,CAACD,WAAW,GAAG,IAAf,CAAd;AACAK,IAAAA,aAAa,CAAC,KAAD,CAAb;;AAEA,QAAI,CAACC,SAAL,EAAgB;AACd2B,MAAAA,SAAS;AACV;AACF,GAToC,EASlC,CAACJ,QAAD,EAAWvB,SAAX,EAAsB2B,SAAtB,CATkC,CAArC;AAWA,sBACE,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAC,eAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAE3B,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,oBAAlB;AACQ,IAAA,OAAO,EAAE8B,CAAC,IAAIY,WAAW,CAAC,CAAC,CAAF,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE;AAAQ,IAAA,SAAS,EAAC,oBAAlB;AACQ,IAAA,OAAO,EAAEZ,CAAC,IAAIH,SAAS,EAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAKE;AAAQ,IAAA,SAAS,EAAC,oBAAlB;AACQ,IAAA,OAAO,EAAEG,CAAC,IAAIY,WAAW,CAAC,CAAD,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,eASE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAC,kBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAE/D,YAAY,CAACuC,MAAD,EAAS,EAAT,CAAtB;AAAoC,IAAA,GAAG,EAAC,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,eAME;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BhB,WAAW,CAACoB,IAAzC,CADF,eAEE;AAAG,IAAA,IAAI,EAAC,IAAR;AAAa,IAAA,SAAS,EAAC,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCF,UAAtC,CAFF,CADF,eAKE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,YAAY,EAAE,EAAtB;AACQ,IAAA,KAAK,EAAExB,QADf;AAEQ,IAAA,QAAQ,EAAEiD,YAFlB;AAGQ,IAAA,aAAa,EAAEE,iBAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BrB,eAA5B,CADF,eAEE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,eAGE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BD,YAA5B,CAHF,CALF,CALF,CANF,CATF,eAiCE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEtB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,SAAS,EAAC,yBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAKE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,0BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,SAAS,EAAC,wBAAlB;AAA2C,IAAA,OAAO,EAAE2B,CAAC,IAAIU,cAAc,EAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAQ,IAAA,SAAS,EAAC,4BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CALF,CAjCF,CADF,eA8CE;AAAO,IAAA,GAAG,EAAE/B,QAAZ;AACO,IAAA,YAAY,EAAEqB,CAAC,IAAID,UAAU,CAACC,CAAD,CADpC;AAEO,IAAA,OAAO,EAAEA,CAAC,IAAIc,gBAAgB,EAFrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9CF,CADF;AAoDD,CAxKkB,CAAnB","sourcesContent":["import React, { memo, useState, useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\n\nimport { getSizeImage, formatDate, getPlaySong } from '@/utils/format-utils';\nimport { \n  getSongDetailAction,\n  changeSequenceAction,\n  changeCurrentIndexAndSongAction,\n  changeCurrentLyricIndexAction \n} from '../store/actionCreators';\n\nimport { message } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { Slider } from 'antd';\nimport {\n  PlaybarWrapper,\n  Control,\n  PlayInfo,\n  Operator\n} from './style';\n\nexport default memo(function HYAppPlayerBar() {\n  // props and state\n  const [currentTime, setCurrentTime] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isChanging, setIsChanging] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // redux hook\n  const { \n    currentSong, \n    sequence, \n    lyricList,\n    currentLyricIndex\n  } = useSelector(state => ({\n    currentSong: state.getIn([\"player\", \"currentSong\"]),\n    sequence: state.getIn([\"player\", \"sequence\"]),\n    lyricList: state.getIn([\"player\", \"lyricList\"]),\n    currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"])\n  }), shallowEqual);\n  const dispatch = useDispatch();\n\n  // other hooks\n  const audioRef = useRef();\n  useEffect(() => {\n    dispatch(getSongDetailAction(167876));\n  }, [dispatch]);\n\n  useEffect(() =>  {\n    audioRef.current.src = getPlaySong(currentSong.id);\n    audioRef.current.play().then(res => {\n      setIsPlaying(true);\n    }).catch(err => {\n      setIsPlaying(false);\n    });\n  }, [currentSong]);\n\n  // other handle\n  const picUrl = (currentSong.al && currentSong.al.picUrl) || \"\";\n  const singerName = (currentSong.ar && currentSong.ar[0].name) || \"未知歌手\";\n  const duration = currentSong.dt || 0;\n  const showDuration = formatDate(duration, \"mm:ss\");\n  const showCurrentTime = formatDate(currentTime, \"mm:ss\");\n\n  // handle function\n  const playMusic = useCallback(() => {\n    isPlaying ? audioRef.current.pause(): audioRef.current.play();\n    setIsPlaying(!isPlaying);\n  }, [isPlaying]);\n\n  const timeUpdate = (e) => {\n    const currentTime = e.target.currentTime;\n    if (!isChanging) {\n      setCurrentTime(currentTime * 1000);\n      setProgress(currentTime * 1000 / duration * 100);\n    }\n\n    // 获取当前的歌词\n    let i = 0;\n    for (; i < lyricList.length; i++) {\n      let lyricItem = lyricList[i];\n      if (currentTime * 1000 < lyricItem.time) {\n        break;\n      }\n    }\n\n    if (currentLyricIndex !== i - 1) {\n      dispatch(changeCurrentLyricIndexAction(i - 1));\n      const content = lyricList[i - 1] && lyricList[i - 1].content\n      message.open({\n        key: \"lyric\",\n        content: content,\n        duration: 0,\n        className: \"lyric-class\"\n      })\n    }\n  }\n\n  const changeSequence = () => {\n    let currentSequence = sequence + 1;\n    if (currentSequence > 2) {\n      currentSequence = 0;\n    }\n    dispatch(changeSequenceAction(currentSequence));\n  }\n\n  const changeMusic = (tag) => {\n    dispatch(changeCurrentIndexAndSongAction(tag));\n  }\n\n  const handleMusicEnded = () => {\n    if (sequence === 2) { // 单曲循环\n      audioRef.current.currentTime = 0;\n      audioRef.current.play();\n    } else {\n      dispatch(changeCurrentIndexAndSongAction(1));\n    }\n  }\n\n  const sliderChange = useCallback((value) => {\n    setIsChanging(true);\n    const currentTime = value / 100 * duration;\n    setCurrentTime(currentTime);\n    setProgress(value);\n  }, [duration]);\n\n  const sliderAfterChange = useCallback((value) => {\n    const currentTime = value / 100 * duration / 1000;\n    audioRef.current.currentTime = currentTime;\n    setCurrentTime(currentTime * 1000);\n    setIsChanging(false);\n\n    if (!isPlaying) {\n      playMusic();\n    }\n  }, [duration, isPlaying, playMusic]);\n\n  return (\n    <PlaybarWrapper className=\"sprite_player\">\n      <div className=\"content wrap-v2\">\n        <Control isPlaying={isPlaying}>\n          <button className=\"sprite_player prev\"\n                  onClick={e => changeMusic(-1)}></button>\n          <button className=\"sprite_player play\" \n                  onClick={e => playMusic()}></button>\n          <button className=\"sprite_player next\"\n                  onClick={e => changeMusic(1)}></button>\n        </Control>\n        <PlayInfo>\n          <div className=\"image\">\n            <NavLink to=\"/discover/player\">\n              <img src={getSizeImage(picUrl, 35)} alt=\"\" />\n            </NavLink>\n          </div>\n          <div className=\"info\">\n            <div className=\"song\">\n              <span className=\"song-name\">{currentSong.name}</span>\n              <a href=\"#/\" className=\"singer-name\">{singerName}</a>\n            </div>\n            <div className=\"progress\">\n              <Slider defaultValue={30} \n                      value={progress}\n                      onChange={sliderChange}\n                      onAfterChange={sliderAfterChange}/>\n              <div className=\"time\">\n                <span className=\"now-time\">{showCurrentTime}</span>\n                <span className=\"divider\">/</span>\n                <span className=\"duration\">{showDuration}</span>\n              </div>\n            </div>\n          </div>\n        </PlayInfo>\n        <Operator sequence={sequence}>\n          <div className=\"left\">\n            <button className=\"sprite_player btn favor\"></button>\n            <button className=\"sprite_player btn share\"></button>\n          </div>\n          <div className=\"right sprite_player\">\n            <button className=\"sprite_player btn volume\"></button>\n            <button className=\"sprite_player btn loop\" onClick={e => changeSequence()}></button>\n            <button className=\"sprite_player btn playlist\"></button>\n          </div>\n        </Operator>\n      </div>\n      <audio ref={audioRef} \n             onTimeUpdate={e => timeUpdate(e)} \n             onEnded={e => handleMusicEnded()}/>\n    </PlaybarWrapper>\n  )\n});\n"]},"metadata":{},"sourceType":"module"}