{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\\\u51B7\\u9E1F\\u4E00\\u7C73\\u4E94\\\\Desktop\\\\my-learn\\\\React\\u5B66\\u4E60\\\\\\u8BFE\\u5802\\\\code\\\\hy-music-web-music\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import{getSongDetail,getLyric}from'@/services/player';import{getRandomNumber}from'@/utils/math-utils';import{parseLyric}from'@/utils/parse-lyric';import*as actionTypes from'./constants';var changeCurrentSongAction=function changeCurrentSongAction(currentSong){return{type:actionTypes.CHANGE_CURRENT_SONG,currentSong:currentSong};};var changePlayListAction=function changePlayListAction(playList){return{type:actionTypes.CHANGE_PLAY_LIST,playList:playList};};var changeCurrentSongIndexAction=function changeCurrentSongIndexAction(index){return{type:actionTypes.CHANGE_CURRENT_SONG_INDEX,index:index};};var changLyricListAction=function changLyricListAction(lyricList){return{type:actionTypes.CHANGE_LYRIC_LIST,lyricList:lyricList};};// 对外暴露的action\nexport var changeSequenceAction=function changeSequenceAction(sequence){return{type:actionTypes.CHANGE_SEQUENCE,sequence:sequence};};export var changeCurrentLyricIndexAction=function changeCurrentLyricIndexAction(index){return{type:actionTypes.CHANGE_CURRENT_LYRIC_INDEX,index:index};};export var changeCurrentIndexAndSongAction=function changeCurrentIndexAndSongAction(tag){return function(dispatch,getState){var playList=getState().getIn([\"player\",\"playList\"]);var sequence=getState().getIn([\"player\",\"sequence\"]);var currentSongIndex=getState().getIn([\"player\",\"currentSongIndex\"]);switch(sequence){case 1:// 随机播放\nvar randomIndex=getRandomNumber(playList.length);while(randomIndex===currentSongIndex){randomIndex=getRandomNumber(playList.length);}currentSongIndex=randomIndex;break;default:// 顺序播放\ncurrentSongIndex+=tag;if(currentSongIndex>=playList.length)currentSongIndex=0;if(currentSongIndex<0)currentSongIndex=playList.length-1;}var currentSong=playList[currentSongIndex];dispatch(changeCurrentSongAction(currentSong));dispatch(changeCurrentSongIndexAction(currentSongIndex));// 请求歌词\ndispatch(getLyricAction(currentSong.id));};};export var getSongDetailAction=function getSongDetailAction(ids){return function(dispatch,getState){// 1.根据id查找playList中是否已经有了该歌曲\nvar playList=getState().getIn([\"player\",\"playList\"]);var songIndex=playList.findIndex(function(song){return song.id===ids;});// 2.判断是否找到歌曲\nvar song=null;if(songIndex!==-1){// 查找歌曲\ndispatch(changeCurrentSongIndexAction(songIndex));song=playList[songIndex];dispatch(changeCurrentSongAction(song));dispatch(getLyricAction(song.id));}else{// 没有找到歌曲\n// 请求歌曲数据\ngetSongDetail(ids).then(function(res){song=res.songs&&res.songs[0];if(!song)return;// 1.将最新请求到的歌曲添加到播放列表中\nvar newPlayList=_toConsumableArray(playList);newPlayList.push(song);// 2.更新redux中的值\ndispatch(changePlayListAction(newPlayList));dispatch(changeCurrentSongIndexAction(newPlayList.length-1));dispatch(changeCurrentSongAction(song));// 3.请求歌词\ndispatch(getLyricAction(song.id));});}};};export var getLyricAction=function getLyricAction(id){return function(dispatch){getLyric(id).then(function(res){var lyric=res.lrc.lyric;var lyricList=parseLyric(lyric);dispatch(changLyricListAction(lyricList));});};};","map":{"version":3,"sources":["C:/Users/冷鸟一米五/Desktop/my-learn/React学习/课堂/code/hy-music-web-music/src/pages/player/store/actionCreators.js"],"names":["getSongDetail","getLyric","getRandomNumber","parseLyric","actionTypes","changeCurrentSongAction","currentSong","type","CHANGE_CURRENT_SONG","changePlayListAction","playList","CHANGE_PLAY_LIST","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","changLyricListAction","lyricList","CHANGE_LYRIC_LIST","changeSequenceAction","sequence","CHANGE_SEQUENCE","changeCurrentLyricIndexAction","CHANGE_CURRENT_LYRIC_INDEX","changeCurrentIndexAndSongAction","tag","dispatch","getState","getIn","currentSongIndex","randomIndex","length","getLyricAction","id","getSongDetailAction","ids","songIndex","findIndex","song","then","res","songs","newPlayList","push","lyric","lrc"],"mappings":"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","sourcesContent":["import { getSongDetail, getLyric } from '@/services/player';\nimport { getRandomNumber } from '@/utils/math-utils';\nimport { parseLyric } from '@/utils/parse-lyric';\n\nimport * as actionTypes from './constants';\n\nconst changeCurrentSongAction = (currentSong) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong\n});\n\nconst changePlayListAction = (playList) => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList\n});\n\nconst changeCurrentSongIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n});\n\nconst changLyricListAction = (lyricList) => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList\n})\n\n\n// 对外暴露的action\nexport const changeSequenceAction = (sequence) => ({\n  type: actionTypes.CHANGE_SEQUENCE,\n  sequence\n});\n\nexport const changeCurrentLyricIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  index\n})\n\nexport const changeCurrentIndexAndSongAction = (tag) => {\n  return (dispatch, getState) => {\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n\n    switch (sequence) {\n      case 1: // 随机播放\n        let randomIndex = getRandomNumber(playList.length);\n        while (randomIndex === currentSongIndex) {\n          randomIndex = getRandomNumber(playList.length);\n        }\n        currentSongIndex = randomIndex;\n        break;\n      default: // 顺序播放\n        currentSongIndex += tag;\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n    }\n\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongAction(currentSong));\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\n\n    // 请求歌词\n    dispatch(getLyricAction(currentSong.id));\n  }\n}\n\nexport const getSongDetailAction = (ids) => {\n  return (dispatch, getState) => {\n    // 1.根据id查找playList中是否已经有了该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex(song => song.id === ids);\n\n    // 2.判断是否找到歌曲\n    let song = null;\n    if (songIndex !== -1) { // 查找歌曲\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      song = playList[songIndex];\n      dispatch(changeCurrentSongAction(song));\n      dispatch(getLyricAction(song.id));\n    } else { // 没有找到歌曲\n      // 请求歌曲数据\n      getSongDetail(ids).then(res => {\n        song = res.songs && res.songs[0];\n        if (!song) return;\n\n        // 1.将最新请求到的歌曲添加到播放列表中\n        const newPlayList = [...playList];\n        newPlayList.push(song);\n\n        // 2.更新redux中的值\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song));\n\n        // 3.请求歌词\n        dispatch(getLyricAction(song.id));\n      })\n    }\n  }\n}\n\nexport const getLyricAction = (id) => {\n  return dispatch => {\n    getLyric(id).then(res => {\n      const lyric = res.lrc.lyric;\n      const lyricList = parseLyric(lyric);\n      dispatch(changLyricListAction(lyricList));\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}